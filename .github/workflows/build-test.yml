name: Test Build

on:
    push:
         branches: [ 'master' ]
    pull_request:
         branches: [ 'develop' ]
    workflow_dispatch:

env:
    BUILD_TYPE: Debug

jobs:
    prep:
        name: Notify about testing
        runs-on: ubuntu-latest
        steps:
          - uses: inlife/actiord-action@v1
            if: "always()"
            continue-on-error: true
            with:
              url: ${{ secrets.ACTIORD_URL }}
              icon: "https://cdn.zakto.pw/office/test.jpg"
              state: started
    build:
        env:
            buildDir: '${{ github.workspace }}/build/'
        strategy:
            matrix:
                os: [ windows-2019 ]
            fail-fast: false
        runs-on: ${{ matrix.os }}
        needs: prep

        steps:
            -   uses: actions/checkout@v2
                with:
                    submodules: true
                    
            -   name: Create LFS file list
                run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

            -   name: Restore LFS cache
                uses: actions/cache@v2
                id: lfs-cache
                with:
                 path: .git/lfs
                 key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

            -   name: Checkout LFS objects
                run: git lfs pull

            -   uses: maxim-lobanov/setup-xcode@v1
                with:
                    xcode-version: '11.2.1'
                if: runner.os == 'macOS'

            -   name: Install tools on Ubuntu
                run: sudo apt-get install -y ninja-build build-essential libcurl4-openssl-dev
                if: runner.os == 'Linux'

            # Install latest CMake.
            -   uses: lukka/get-cmake@latest

            -   name: Set up Visual Studio shell
                if: runner.os == 'Windows'
                uses: egor-tensin/vs-shell@v2

            -   name: Configure the project (Windows)
                if: runner.os == 'Windows'
                run: |
                    cmake -B build -G "Ninja"

            -   name: Configure the project
                if: runner.os != 'Windows'
                run: |
                    cmake -B build
            
            -   name: Build the project
                run: |
                    cmake --build build
                    
            -   name: Run the tests
                run: |
                    cmake --build build --target RunFrameworkTests

    done:
        name: Notify about status
        runs-on: ubuntu-latest
        needs: build
        if: "always()"
        steps:
          - uses: inlife/actiord-action@v1
            if: ${{ contains(needs.build.result, 'success') }}
            continue-on-error: true
            with:
              url: ${{ secrets.ACTIORD_URL }}
              state: succeeded
          - uses: inlife/actiord-action@v1
            if: ${{ !(contains(needs.build.result, 'success')) }}
            continue-on-error: true
            with:
              url: ${{ secrets.ACTIORD_URL }}
              icon: "https://cdn.zakto.pw/office/fail.jpg"
              state: failed
